{
    "(@anotation binding)": {
        "prefix": "lwc-bind",
        "body": [
            "$LINE_COMMENT ** Si usas Track debes agregar el import en las primeras lineas de clase ** import { track } from 'lwc';",
            "$LINE_COMMENT ** Si usas Api debes agregar el import en las primeras lineas de clase** import { api } from 'lwc';",
            "${1|@track,@api|} varName = ${2|undefined,null|};"
        ],
        "description": "(Usa @track solo en caso de usar Array o Objetos), (Usa @api para permitir el acceso entre componentes Padre a Hijo)"
    },
    "(Handle Events)": {
        "prefix": "lwc-catchEvent",
        "body": [
            "$LINE_COMMENT ** No modifiques -> event.target.value **",
            "methodName(event) {",
            "    this.$1{yourVar} = event.target.value;",
            "}",
            "$0"
        ],
        "description": "Usalo en eventos"
    },
    "(Life Hooks Dom Run)": {
        "prefix": "lwc-init",
        "body": [
            "connectedCallback() {",
            "    //Instrucciones a ejecutar",
            "}",
            "$0"
        ],
        "description": "(Life Hooks) - Se ejecuta cuando el componente es insertado al DOM"
    },
    "(Life Hooks Dom Delete)": {
        "prefix": "lwc-delete",
        "body": [
            "disconnectedCallback() {",
            "    //Instrucciones a ejecutar",
            "}",
            "$0"
        ],
        "description": "(Life Hooks) - Se ejecuta cuando el componente es eliminado del DOM"
    },
    "(Event-Sync TimeOut)": {
        "prefix": "lwc-timeout",
        "body": [
            "$LINE_COMMENT ** Usalo dentro de un methodo ** ",
            "setTimeout(() => {",
            "    //Instrucciones a ejecutar",
            "}, ${1:MiliSeg});",
            "$0"
        ],
        "description": "AcciÃ³n sincrona, pausa el proceso durante un tiempo"
    },
    "(Obj)": {
        "prefix": "lwc-obj",
        "body": [
            "varName = [",
            "   {",
            "       Id: 1,",
            "       Name: 'Amy Taylor',",
            "       Title: 'VP of Engineering',",
            "   },",
            "   {",
            "       Id: 2,",
            "       Name: 'Michael Jones',",
            "       Title: 'VP of Sales',",
            "   }",
            "];",
            "$0"
        ],
        "description": "Arreglo de objetos"
    },
    "(Data Export)": {
        "prefix": "lwc-dataExport",
        "body": [
            "$LINE_COMMENT ** Recuerda usarlo en un archivo js limpio, necesita un xml simple sin exposicion, importalo en el componente js que necesites **",
            "$LINE COMMENT ** Para importar usa la siguiente linea, fileName debe ser sin .extension:",
            "$LINE_COMMENT import { nameArrayData } from 'c/${1:fileName}';",
            "export const nameArrayData = [",
            "   {",
            "       \"nombre\":\"prueba\"",
            "   }",
            "];",
            "$0"
        ],
        "description": "Exporta un conjunto de datos que se pueden importar en un js de componente"
    },
    "(Setters And Getters)": {
        "prefix": "lwc-setter",
        "body": [
            "$LINE_COMMENT ** Es necesario en la cabecera de la clase ** import { track, api } from 'lwc';",
            "$LINE_COMMENT ** Binding con la vista de este componente ** ",
            "@track varView;",
            "",
            "$LINE_COMMENT ** Variable que se usara para responderle al padre ** ",
            "_varView = undefined;",
            "",
            "$LINE_COMMENT ** Usala para hacer reactiva la propiedad expuesta al padre ** ",
            "set apiName(valueFromParent) {",
            "    this._varView = valueFromParent;",
            "",
            "    $LINE_COMMENT ** Si quieres homologar en un array ** ",
            "    $LINE_COMMENT this.varView = array.find(varTemporal => varTemporal.value === valueFromParent);",
            "",
            "}",
            "",
            "$LINE_COMMENT ** Metodo necesario para responder al padre ** ",
            "@api get apiName(){",
            "    return this._varView;",
            "}",
            "$0"
        ],
        "description": "Generas un get y set de api para el componente hijo disponible para consumir con *lwc-callSon* desde padre"
    },
    "(Get Record on Line)": {
        "prefix": "lwc-getRecord",
        "body": [
            "$LINE_COMMENT ** Es necesario que agregues estos importes en la cabecera del js ** ",
            "$LINE_COMMENT import { wire } from 'lwc';",
            "$LINE_COMMENT import { getRecord, getFieldValue } from 'lightning/uiRecordApi';",
            "$LINE_COMMENT import Id from '@salesforce/user/Id';",
            "$LINE_COMMENT import NAME_FIELD from '@salesforce/schema/User.Name';",
            "$LINE_COMMENT ** Estructura de campos, separados por comas **",
            "$LINE_COMMENT const fields = [NAME_FIELD];",
            "",
            "",
            "// Required inside Class {}",
            "${1:varId} = Id;",
            "",
            "@wire(getRecord, { recordId: '$${2:varId}', fields })",
            "${3:varGetRecord};",
            "",
            "get ${4:nameMethod}() {",
            "    return getFieldValue(this.${3:varGetRecord}.data, NAME_FIELD);",
            "}",
            "$0"
        ],
        "description": "Obtienes valores de los campos del registro desde la pagina en donde es ubicado el componente"
    },
    "(Apex inside)": {
        "prefix": "lwc-callApex",
        "body": [
            "$LINE_COMMENT ** Es necesario que agregues estos importes en la cabecera del js ** ",
            "$LINE_COMMENT import { wire } from 'lwc';",
            "$LINE_COMMENT import ${1:methodName} from '@salesforce/apex/${4:className}.${2:methodName}';",
            "$LINE_COMMENT ** Recuerda crear la clase apex a llamar usando el comando lwc-apex en una clase Apex de SalesForce ** ",
            "",
            "paramVal = null;",
            "@wire(${3:methodName}, { paramName: '$$paramVal' }) ${5:varReturnMethod};",
            "$0"
        ],
        "description": "Te permite llamar un apex con o sin parametros"
    },
    "(Beautiful Code)": {
        "prefix": "lwc-beautiful",
        "body": [
            "$LINE_COMMENT************************************************** Scopes *************************************************",
            "@track $$VIEW = {",
            "    card: {",
            "        buttons: {",
            "            refresh: false",
            "        }",
            "    }",
            "};",
            "$LINE_COMMENT***********************************************************************************************************",
            "$LINE_COMMENT*************************************************  Wires **************************************************",
            "$LINE_COMMENT***********************************************************************************************************",
            "$LINE_COMMENT************************************************* Actions *************************************************",
            "$$EVENT = {",
            "    refreshData: () => {",
            "        // Tu codigo a ejecutar",
            "    }",
            "}",
            "$LINE_COMMENT***********************************************************************************************************",
            "$LINE_COMMENT************************************************* Complex *************************************************",
            "$LINE_COMMENT***********************************************************************************************************",
            "$0"
        ],
        "description": "Te permite mantener tu codigo limpio y ordenado"
    }
}